@model Genrev.Web.App.Analysis.Models.DrilldownVM

@Html.DevExpress().GridView(
    s => {

        s.Name = "DrilldownGrid";
        s.Width = Unit.Percentage(100);
        s.KeyFieldName = "ID";

        s.CallbackRouteValues = new { Controller = "Analysis", Action = "DrilldownGridCallback" };

        s.Settings.ShowGroupPanel = true;
        //s.Settings.ShowFilterBar = GridViewStatusBarMode.Visible;
        s.Settings.ShowFilterRow = true;
        s.SettingsBehavior.AllowFocusedRow = true;
        s.SettingsText.GroupPanel = "Drag a column header here to group by that column (non-numeric fields only)";

        s.Settings.HorizontalScrollBarMode = ScrollBarMode.Auto;
        s.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;
        s.SettingsPager.PageSize = 200;
        s.Settings.ShowFooter = true;

        s.SettingsExport.EnableClientSideExportAPI = true;
        s.SettingsExport.ExcelExportMode = DevExpress.Export.ExportType.WYSIWYG;

        s.Toolbars.Add(t =>
        {
            t.SettingsAdaptivity.Enabled = true;
            t.SettingsAdaptivity.EnableCollapseRootItemsToIcons = true;
            t.Items.Add(GridViewToolbarCommand.ExportToXls);
            t.Items.Add(GridViewToolbarCommand.ExportToXlsx);
        });

        s.TotalSummary.Add(new ASPxSummaryItem("SalesActual", DevExpress.Data.SummaryItemType.Sum) { ShowInColumn = "SalesActual"});
        s.TotalSummary.Add(new ASPxSummaryItem("SalesForecast", DevExpress.Data.SummaryItemType.Sum) { ShowInColumn = "SalesForecast" });
        s.TotalSummary.Add(new ASPxSummaryItem("SalesDifference", DevExpress.Data.SummaryItemType.Sum) { ShowInColumn = "SalesDifference" });
        s.TotalSummary.Add(new ASPxSummaryItem("SalesVariance", DevExpress.Data.SummaryItemType.Average) { ShowInColumn = "SalesVariance" });
        s.TotalSummary.Add(new ASPxSummaryItem("GPDActual", DevExpress.Data.SummaryItemType.Sum) { ShowInColumn = "GPDActual" });
        s.TotalSummary.Add(new ASPxSummaryItem("GPDForecast", DevExpress.Data.SummaryItemType.Sum) { ShowInColumn = "GPDForecast" });
        s.TotalSummary.Add(new ASPxSummaryItem("GPDDifference", DevExpress.Data.SummaryItemType.Sum) { ShowInColumn = "GPDDifference" });
        s.TotalSummary.Add(new ASPxSummaryItem("GPDVariance", DevExpress.Data.SummaryItemType.Average) { ShowInColumn = "GPDVariance" });
        s.TotalSummary.Add(new ASPxSummaryItem("GPPActual", DevExpress.Data.SummaryItemType.Average) { ShowInColumn = "GPPActual" });
        s.TotalSummary.Add(new ASPxSummaryItem("GPPForecast", DevExpress.Data.SummaryItemType.Average) { ShowInColumn = "GPPForecast" });
        s.TotalSummary.Add(new ASPxSummaryItem("GPPDifference", DevExpress.Data.SummaryItemType.Average) { ShowInColumn = "GPPDifference" });
        s.TotalSummary.Add(new ASPxSummaryItem("GPPVariance", DevExpress.Data.SummaryItemType.Average) { ShowInColumn = "GPPVariance" });
        s.TotalSummary.Add(new ASPxSummaryItem("CallsActual", DevExpress.Data.SummaryItemType.Sum) { ShowInColumn = "CallsActual" });
        s.TotalSummary.Add(new ASPxSummaryItem("CallsForecast", DevExpress.Data.SummaryItemType.Sum) { ShowInColumn = "CallsForecast" });
        s.TotalSummary.Add(new ASPxSummaryItem("CallsDifference", DevExpress.Data.SummaryItemType.Sum) { ShowInColumn = "CallsDifference" });

        s.DataBound = (sender, e) => {

            ASPxGridView grid = sender as ASPxGridView;
            foreach (GridViewColumn col in grid.Columns) {
                switch (col.Name) {
                    case "bandClassifications":
                        col.Visible = Model.ShowColumnGroupClassification;
                        break;
                    case "bandSales":
                        col.Visible = Model.ShowColumnGroupSales;
                        break;
                    case "bandGrossProfitDollars":
                        col.Visible = Model.ShowColumnGroupGPD;
                        break;
                    case "bandGrossProfitPercent":
                        col.Visible = Model.ShowColumnGroupGPP;
                        break;
                    case "bandSalesCalls":
                        col.Visible = Model.ShowColumnGroupCalls;
                        break;
                }
            }
        };

        s.HtmlFooterCellPrepared = (sender, e) =>
        {
            GridViewDataColumn column = e.Column as GridViewDataColumn;
            ASPxGridView grid = e.Column.Grid;
            if (column == null)
                return;
            foreach (ASPxSummaryItem summaryItem in grid.TotalSummary)
            {
                if (summaryItem.ShowInColumn == e.Column.Name)
                {
                    decimal? summaryValue = Convert.ToDecimal(e.GetSummaryValue(summaryItem));
                    if (summaryValue < 0)
                        e.Cell.ForeColor = System.Drawing.Color.Red;
                    else
                        e.Cell.ForeColor = System.Drawing.Color.Black;
                }
            }
        };


        s.Columns.Add( c=> {
            c.Name = "Period";
            c.FieldName = "Period";
            c.PropertiesEdit.DisplayFormatString = "MMM";
            c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            c.FixedStyle = GridViewColumnFixedStyle.Left;
            c.SortOrder = DevExpress.Data.ColumnSortOrder.Ascending;
            c.SortIndex = 0;
        });

        s.Columns.Add(c => {
            c.Name = "CompanyName";
            c.Caption = "Customer";
            c.FieldName = "CompanyName";
            c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            c.FixedStyle = GridViewColumnFixedStyle.Left;
            c.SortIndex = 1;
            c.SortOrder = DevExpress.Data.ColumnSortOrder.Ascending;
        });

        if (AppService.Current.Settings.ProductFeatureEnabled)
        {
            s.Columns.Add(c =>
            {
                c.Name = "ProductSKU";
                c.Caption = "Product";
                c.FieldName = "ProductSKU";
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                c.FixedStyle = GridViewColumnFixedStyle.Left;
                c.SortIndex = 1;
                c.SortOrder = DevExpress.Data.ColumnSortOrder.Ascending;
            });
        }


        s.Columns.Add(c => {
            c.Name = "SalesProfessional";
            c.Caption = "Sales <br />Professional";
            c.FieldName = "SalesProfessional";
            c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            c.FixedStyle = GridViewColumnFixedStyle.Left;
            c.SortIndex = 2;
            c.SortOrder = DevExpress.Data.ColumnSortOrder.Ascending;
        });

        s.Columns.AddBand(b => {
            b.Name = "bandClassifications";
            b.Caption = "Classification";
            b.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;

            b.Columns.Add(c => {
                c.Name = "Industry";
                c.Caption = "Industry";
                c.FieldName = "Industry";
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            });
            b.Columns.Add(c => {
                c.Name = "CustomerType";
                c.Caption = "Customer Type";
                c.FieldName = "CustomerType";
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            });
            b.Columns.Add(c => {
                c.Name = "AccountType";
                c.Caption = "Account Type";
                c.FieldName = "AccountType";
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            });
        });

        s.Columns.AddBand(b => {
            b.Name = "bandSales";
            b.Caption = "Sales";
            b.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;

            b.Columns.Add(c => {
                c.Name = "SalesForecast";
                c.Caption = "Forecast";
                c.FieldName = "SalesForecast";
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                c.Settings.AllowGroup = DefaultBoolean.False;
                c.PropertiesEdit.DisplayFormatString = "c0";
            });
            b.Columns.Add(c => {
                c.Name = "SalesActual";
                c.Caption = "Actual";
                c.FieldName = "SalesActual";
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                c.Settings.AllowGroup = DefaultBoolean.False;
                c.PropertiesEdit.DisplayFormatString = "c0";
            });
            b.Columns.Add(c => {
                c.Name = "SalesDifference";
                c.Caption = "Difference";
                c.FieldName = "SalesDifference";
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                c.Settings.AllowGroup = DefaultBoolean.False;
                c.PropertiesEdit.DisplayFormatString = "c0";
            });
            b.Columns.Add(c => {
                c.Name = "SalesVariance";
                c.Caption = "Variance";
                c.FieldName = "SalesVariance";
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                c.Settings.AllowGroup = DefaultBoolean.False;
                c.PropertiesEdit.DisplayFormatString = "p2";
            });
        });

        s.Columns.AddBand(b => {
            b.Name = "bandGrossProfitDollars";
            b.Caption = "Gross Profit Dollars (GPD)";
            b.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;

            b.Columns.Add(c => {
                c.Name = "GPDForecast";
                c.Caption = "Forecast";
                c.FieldName = "GPDForecast";
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                c.Settings.AllowGroup = DefaultBoolean.False;
                c.PropertiesEdit.DisplayFormatString = "c0";
            });
            b.Columns.Add(c => {
                c.Name = "GPDActual";
                c.Caption = "Actual";
                c.FieldName = "GPDActual";
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                c.Settings.AllowGroup = DefaultBoolean.False;
                c.PropertiesEdit.DisplayFormatString = "c0";
            });
            b.Columns.Add(c => {
                c.Name = "GPDDifference";
                c.Caption = "Difference";
                c.FieldName = "GPDDifference";
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                c.Settings.AllowGroup = DefaultBoolean.False;
                c.PropertiesEdit.DisplayFormatString = "c0";
            });
            b.Columns.Add(c => {
                c.Name = "GPDVariance";
                c.Caption = "Variance";
                c.FieldName = "GPDVariance";
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                c.Settings.AllowGroup = DefaultBoolean.False;
                c.PropertiesEdit.DisplayFormatString = "p2";
            });
        });

        s.Columns.AddBand(b => {
            b.Name = "bandGrossProfitPercent";
            b.Caption = "Gross Profit Percent (GPP)";
            b.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;

            b.Columns.Add(c => {
                c.Name = "GPPForecast";
                c.Caption = "Forecast";
                c.FieldName = "GPPForecast";
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                c.Settings.AllowGroup = DefaultBoolean.False;
                c.PropertiesEdit.DisplayFormatString = "p2";
            });
            b.Columns.Add(c => {
                c.Name = "GPPActual";
                c.Caption = "Actual";
                c.FieldName = "GPPActual";
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                c.Settings.AllowGroup = DefaultBoolean.False;
                c.PropertiesEdit.DisplayFormatString = "p2";
            });
            b.Columns.Add(c => {
                c.Name = "GPPDifference";
                c.Caption = "Difference";
                c.FieldName = "GPPDifference";
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                c.Settings.AllowGroup = DefaultBoolean.False;
                c.PropertiesEdit.DisplayFormatString = "p2";
            });
            b.Columns.Add(c => {
                c.Name = "GPPVariance";
                c.Caption = "Variance";
                c.FieldName = "GPPVariance";
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                c.Settings.AllowGroup = DefaultBoolean.False;
                c.PropertiesEdit.DisplayFormatString = "p2";
            });
        });

        s.Columns.AddBand(b => {
            b.Name = "bandSalesCalls";
            b.Caption = "Sales Calls";
            b.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;

            b.Columns.Add(c => {
                c.Name = "CallsForecast";
                c.Caption = "Forecast";
                c.FieldName = "CallsForecast";
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                c.Settings.AllowGroup = DefaultBoolean.False;
            });
            b.Columns.Add(c => {
                c.Name = "CallsActual";
                c.Caption = "Actual";
                c.FieldName = "CallsActual";
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                c.Settings.AllowGroup = DefaultBoolean.False;
            });
            b.Columns.Add(c => {
                c.Name = "CallsDifference";
                c.Caption = "Difference";
                c.FieldName = "CallsDifference";
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                c.Settings.AllowGroup = DefaultBoolean.False;
            });
        });





        // DIFFERENCE FORMATTING
        //s.FormatConditions.AddHighlight(r => {
        //    r.FieldName = "SalesDifference";
        //    r.Expression = "[SalesDifference] < 0";
        //    r.CellStyle.CssClass = "drill-diff-bad";
        //    r.Format = GridConditionHighlightFormat.Custom;
        //});
        //s.FormatConditions.AddHighlight(r => {
        //    r.FieldName = "GPDDifference";
        //    r.Expression = "[GPDDifference] < 0";
        //    r.CellStyle.CssClass = "drill-diff-bad";
        //    r.Format = GridConditionHighlightFormat.Custom;
        //});
        //s.FormatConditions.AddHighlight(r => {
        //    r.FieldName = "GPPDifference";
        //    r.Expression = "[GPPDifference] < 0";
        //    r.CellStyle.CssClass = "drill-diff-bad";
        //    r.Format = GridConditionHighlightFormat.Custom;
        //});
        //s.FormatConditions.AddHighlight(r => {
        //    r.FieldName = "CallsDifference";
        //    r.Expression = "[CallsDifference] < 0";
        //    r.CellStyle.CssClass = "drill-diff-bad";
        //    r.Format = GridConditionHighlightFormat.Custom;
        //});






        // SALES VARIANCE FORMATTING
        s.FormatConditions.AddHighlight(r =>
        {
            r.FieldName = "SalesVariance";
            r.Expression = "[SalesVariance] < -0.1";
            r.CellStyle.CssClass = "drill-var-bad";
            r.Format = GridConditionHighlightFormat.Custom;
        });
        s.FormatConditions.AddHighlight(r =>
        {
            r.FieldName = "SalesVariance";
            r.Expression = "[SalesVariance] >= 0";
            r.CellStyle.CssClass = "drill-var-good";
            r.Format = GridConditionHighlightFormat.Custom;
        });
        s.FormatConditions.AddHighlight(r =>
        {
            r.FieldName = "SalesVariance";
            r.Expression = "[SalesVariance] >= -0.1 AND [SalesVariance] < 0";
            r.CellStyle.CssClass = "drill-var-ok";
            r.Format = GridConditionHighlightFormat.Custom;
        });
        s.FormatConditions.AddHighlight(r =>
        {
            r.FieldName = "SalesVariance";
            r.Expression = "[SalesVariance] = null";
            r.CellStyle.CssClass = "drill-var-none";
            r.Format = GridConditionHighlightFormat.Custom;
        });

        // GPD VARIANCE FORMATTING
        s.FormatConditions.AddHighlight(r => {
            r.FieldName = "GPDVariance";
            r.Expression = "[GPDVariance] < -0";
            r.CellStyle.CssClass = "drill-var-bad";
            r.Format = GridConditionHighlightFormat.Custom;
        });
        //s.FormatConditions.AddHighlight(r => {
        //    r.FieldName = "GPDVariance";
        //    r.Expression = "[GPDVariance] >= 0";
        //    r.CellStyle.CssClass = "drill-var-good";
        //    r.Format = GridConditionHighlightFormat.Custom;
        //});
        //s.FormatConditions.AddHighlight(r => {
        //    r.FieldName = "GPDVariance";
        //    r.Expression = "[GPDVariance] >= -0.1 AND [GPDVariance] < 0";
        //    r.CellStyle.CssClass = "drill-var-ok";
        //    r.Format = GridConditionHighlightFormat.Custom;
        //});
        s.FormatConditions.AddHighlight(r =>
        {
            r.FieldName = "GPDVariance";
            r.Expression = "[GPDVariance] = null";
            r.CellStyle.CssClass = "drill-var-none";
            r.Format = GridConditionHighlightFormat.Custom;
        });


        // GPP VARIANCE FORMATTING
        s.FormatConditions.AddHighlight(r => {
            r.FieldName = "GPPVariance";
            r.Expression = "[GPPVariance] < -0";
            r.CellStyle.CssClass = "drill-var-bad";
            r.Format = GridConditionHighlightFormat.Custom;
        });
        //s.FormatConditions.AddHighlight(r => {
        //    r.FieldName = "GPPVariance";
        //    r.Expression = "[GPPVariance] >= 0";
        //    r.CellStyle.CssClass = "drill-var-good";
        //    r.Format = GridConditionHighlightFormat.Custom;
        //});
        //s.FormatConditions.AddHighlight(r => {
        //    r.FieldName = "GPPVariance";
        //    r.Expression = "[GPPVariance] >= -0.1 AND [GPPVariance] < 0";
        //    r.CellStyle.CssClass = "drill-var-ok";
        //    r.Format = GridConditionHighlightFormat.Custom;
        //});
        s.FormatConditions.AddHighlight(r =>
        {
            r.FieldName = "GPPVariance";
            r.Expression = "[GPPVariance] = null";
            r.CellStyle.CssClass = "drill-var-none";
            r.Format = GridConditionHighlightFormat.Custom;
        });

        //Calls Formatting
        s.FormatConditions.AddHighlight(r =>
        {
            r.FieldName = "CallsDifference";
            r.Expression = "[CallsDifference] < -0";
            r.CellStyle.CssClass = "drill-var-bad";
            r.Format = GridConditionHighlightFormat.Custom;
        });

        //s.FormatConditions.AddColorScale("SalesActual", GridConditionColorScaleFormat.GreenYellowRed);

        s.Settings.ShowTitlePanel = true;

        s.SetTitlePanelTemplateContent(c => {

            var vw = ViewContext.Writer;

            // OPEN OUTER TABLE AND FIRST ROW
            vw.Write("<table style'width: 100%;'><tr>");

            // OPEN LEFT CELL WITH FIXED WIDTH
            vw.Write("<td>");

            // LEFT CELL WITH FIXED WIDTH CONTENT

            // left cell inner table
            vw.Write("<table><tr><td>");

            Html.DevExpress().ComboBox(
                cb => {
                    cb.Name = "ctlYear";
                    cb.Width = 55;
                    cb.PreRender = (sender, e) => {
                        //Genrev.Web.Helpers.DevEx.ComboPreRenderByField(sender, Model.SelectedDate, "Date");
                    };
                    cb.Properties.Caption = "Fiscal Year";
                }
            ).BindList(Model.AvailableYears).Bind(Model.SelectedYear).Render();

            vw.Write("</td>");


            // checkboxes
            vw.Write("<td style='padding-left: 20px;'><span style='font-weight: 400;'>Show Column Groups: </span></td>");
            vw.Write("<td style='padding-left: 20px;'>");
            Html.DevExpress().CheckBox(cb => { cb.Name = "ShowClassification"; cb.Text = "Classification"; }).Bind(Model.ShowColumnGroupClassification).Render();
            vw.Write("</td><td style='padding-left: 20px;'>");
            Html.DevExpress().CheckBox(cb => { cb.Name = "ShowSales"; cb.Text = "Sales"; }).Bind(Model.ShowColumnGroupSales).Render();
            vw.Write("</td><td style='padding-left: 20px;'>");
            Html.DevExpress().CheckBox(cb => { cb.Name = "ShowGPD"; cb.Text = "GPD"; }).Bind(Model.ShowColumnGroupGPD).Render();
            vw.Write("</td><td style='padding-left: 20px;'>");
            Html.DevExpress().CheckBox(cb => { cb.Name = "ShowGPP"; cb.Text = "GPP"; }).Bind(Model.ShowColumnGroupGPP).Render();
            vw.Write("</td><td style='padding-left: 20px;'>");
            Html.DevExpress().CheckBox(cb => { cb.Name = "ShowCalls"; cb.Text = "Calls"; }).Bind(Model.ShowColumnGroupCalls).Render();
            vw.Write("</td>");


            // close button table and first row
            vw.Write("</tr></table>");

            // CLOSE RIGHT CELL WITH RELATIVE WIDTH & RIGHT ALIGN
            vw.Write("</td>");

            // CLOSE OUTER TABLE AND FIRST ROW
            vw.Write("</tr></table>");

        });

    }
).Bind(Model.Items).GetHtml()
