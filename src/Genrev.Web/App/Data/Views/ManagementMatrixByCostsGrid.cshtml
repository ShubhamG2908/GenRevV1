@model Genrev.Web.App.Data.Models.Management.MatrixVM

@Html.DevExpress().GridView(
    s => {

        s.Name = "ManagementMatrixGrid";
        s.KeyFieldName = "GridID";
        s.Width = Unit.Percentage(100);

        s.SettingsEditing.Mode = GridViewEditingMode.Batch;
        s.SettingsEditing.BatchUpdateRouteValues = new { Controller = "Data", Action = "ManagementMatrixBatchEdit" };

        s.Settings.VerticalScrollBarMode = ScrollBarMode.Auto;

        s.SettingsPager.PageSize = 300;

        //s.Settings.ShowFilterRow = true;

        s.SettingsContextMenu.Enabled = true;
        s.ClientSideEvents.ContextMenu = "function(s, e) { Data.Matrix.Grid.ContextMenu.Invoked(s, e); }";
        s.ClientSideEvents.ContextMenuItemClick = "function(s, e) { Data.Matrix.Grid.ContextMenu.ItemClicked(s, e); }";
        s.FillContextMenuItems = (sender, e) => {
            e.Items.Clear();
            e.Items.Add("Delete Line", "DeleteLine");
        };

        s.BeforeGetCallbackResult += (sender, e) => {
            MVCxGridView grid = sender as MVCxGridView;
            if (Model.ViewMode == Genrev.Web.App.Data.Models.Management.MatrixVM.ViewModes.GroupedByMonth) {
                grid.GroupBy(grid.Columns["ctlDate"]);
                grid.Columns["periodSortable"].Visible = false;
            } else {
                grid.UnGroup(grid.Columns["ctlDate"]);
                grid.Columns["periodSortable"].Visible = true;
            }
        };

        s.SettingsBehavior.AllowFixedGroups = Model.ViewMode == Genrev.Web.App.Data.Models.Management.MatrixVM.ViewModes.GroupedByMonth ? true : false;

        s.CallbackRouteValues = new { Controller = "Data", Action = "ManagementMatrixGridCallback" };

        s.CellEditorInitialize = (sender, e) => {
            ASPxEdit editor = (ASPxEdit)e.Editor;
            editor.ValidationSettings.Display = Display.Dynamic;
        };

        s.ClientSideEvents.Init = "function(s, e) { Data.Matrix.Grid.Initialized(true); }";

        s.Settings.ShowStatusBar = GridViewStatusBarMode.Hidden;
        s.Settings.ShowTitlePanel = true;

        s.Settings.ShowFooter = true;

        s.TotalSummary.Add(new ASPxSummaryItem("SalesActual", DevExpress.Data.SummaryItemType.Sum) { ShowInColumn = "SalesActual" });
        s.TotalSummary.Add(new ASPxSummaryItem("SalesForecast", DevExpress.Data.SummaryItemType.Sum) { ShowInColumn = "SalesForecast" });
        s.TotalSummary.Add(new ASPxSummaryItem("SalesTarget", DevExpress.Data.SummaryItemType.Sum) { ShowInColumn = "SalesTarget" });
        s.TotalSummary.Add(new ASPxSummaryItem("GPPActual", DevExpress.Data.SummaryItemType.Sum) { ShowInColumn = "GPPActual" });
        s.TotalSummary.Add(new ASPxSummaryItem("GPPForecast", DevExpress.Data.SummaryItemType.Sum) { ShowInColumn = "GPPForecast" });
        s.TotalSummary.Add(new ASPxSummaryItem("GPPTarget", DevExpress.Data.SummaryItemType.Sum) { ShowInColumn = "GPPTarget" });
        s.TotalSummary.Add(new ASPxSummaryItem("CallsActual", DevExpress.Data.SummaryItemType.Sum) { ShowInColumn = "CallsActual" });
        s.TotalSummary.Add(new ASPxSummaryItem("CallsForecast", DevExpress.Data.SummaryItemType.Sum) { ShowInColumn = "CallsForecast" });
        s.TotalSummary.Add(new ASPxSummaryItem("CallsTarget", DevExpress.Data.SummaryItemType.Sum) { ShowInColumn = "CallsTarget" });
        s.TotalSummary.Add(new ASPxSummaryItem("Potential", DevExpress.Data.SummaryItemType.Sum) { ShowInColumn = "Potential" });
        s.TotalSummary.Add(new ASPxSummaryItem("CurrentOpportunity", DevExpress.Data.SummaryItemType.Sum) { ShowInColumn = "CurrentOpportunity" });
        s.TotalSummary.Add(new ASPxSummaryItem("FutureOpportunity", DevExpress.Data.SummaryItemType.Sum) { ShowInColumn = "FutureOpportunity" });

        s.SetTitlePanelTemplateContent(c => {

            var vw = ViewContext.Writer;

            // OPEN OUTER TABLE AND FIRST ROW
            vw.Write("<table style'width: 100%;'><tr>");

            // OPEN LEFT CELL WITH FIXED WIDTH
            vw.Write("<td>");

            // LEFT CELL WITH FIXED WIDTH CONTENT

            // left cell inner table
            vw.Write("<table><tr><td>");

            Html.DevExpress().ComboBox(
                cb => {
                    cb.Name = "ctlYear";
                    cb.Width = 55;
                    cb.PreRender = (sender, e) => {
                        //Genrev.Web.Helpers.DevEx.ComboPreRenderByField(sender, ViewBag.SelectedDate, "Date");
                    };
                    cb.Properties.Caption = "Fiscal Year";
                }
            ).BindList(Model.AvailableYears).Bind(Model.SelectedYear).Render();

            // close left cell inner table cell 1 and open cell 2
            vw.Write("</td><td style='white-space: nowrap; padding-left: 10px;'>");

            Html.DevExpress().CheckBox(cb => {
                cb.Name = "ctlViewMode";
                cb.Text = "Group by Month";
                cb.ControlStyle.Wrap = DefaultBoolean.False;
                cb.Checked = Model.ViewMode == Genrev.Web.App.Data.Models.Management.MatrixVM.ViewModes.GroupedByMonth ? true : false;
            }).Render();

            vw.Write("</td><td style='white-space: nowrap; padding-left: 10px;'>");

            vw.Write("<span style='font-size: 0.8em; font-weight: 400; font-style: italic;'>(New rows cannot be added in grouped mode)</span>");

            // close left cell inner td, tr and table
            vw.Write("</td></tr></table>");

            // CLOSE LEFT CELL WITH FIXED WIDTH
            vw.Write("</td>");

            // OPEN RIGHT CELL WITH RELATIVE WIDTH & RIGHT ALIGN
            vw.Write("<td align='right' style='width: 100%;'>");

            // RIGHT CELL WITH RELATIVE WIDTH & RIGHT ALIGN CONTENT

            // open button table and first row
            vw.Write("<table align='right'><tr>");

            // cells for buttons
            vw.Write("<td>");
            Html.DevExpress().Button(
                b => {
                    b.Name = "btnAddNew";
                    b.Text = "Add New";
                    b.Enabled = Model.ViewMode == Genrev.Web.App.Data.Models.Management.MatrixVM.ViewModes.GroupedByMonth ? false : true;
                }
            ).Render();
            vw.Write("</td>");

            vw.Write("<td style='padding-left: 5px;'>");
            Html.DevExpress().Button(
                b => {
                    b.Name = "btnCancelChanges";
                    b.Text = "Cancel Changes";
                    //b.Enabled = false;
                }
            ).Render();
            vw.Write("</td>");

            vw.Write("<td style='padding-left: 5px;'>");
            Html.DevExpress().Button(
                b => {
                    b.Name = "btnSaveChanges";
                    b.Text = "Save Changes";
                    //b.Enabled = false;
                }
            ).Render();
            vw.Write("</td>");

            // close button table and first row
            vw.Write("</tr></table>");

            // CLOSE RIGHT CELL WITH RELATIVE WIDTH & RIGHT ALIGN
            vw.Write("</td>");

            // CLOSE OUTER TABLE AND FIRST ROW
            vw.Write("</tr></table>");


        });



        s.Columns.Add(c =>
        {
            c.Name = "ctlDate";
            c.FieldName = "Period.Date";
            c.Caption = "Period";
            c.Width = 70;
            c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            c.ColumnType = MVCxGridViewColumnType.ComboBox;
            var cb = c.PropertiesEdit as ComboBoxProperties;
            cb.ValueType = typeof(DateTime);
            cb.TextField = "DisplayShort";
            cb.ValueField = "Date";
            cb.DataSource = Model.FiscalYearPeriodsList;
            if (Model.ViewMode == Genrev.Web.App.Data.Models.Management.MatrixVM.ViewModes.GroupedByMonth)
            {
                c.GroupIndex = 0;
                c.Visible = false;
            }
            else
            {
                c.Visible = true;
            }
        });


        s.Columns.Add(c =>
        {
            c.Name = "periodSortable";
            c.FieldName = "Period.Date";
            c.Caption = "Period";
            c.Width = 70;
            c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            c.ColumnType = MVCxGridViewColumnType.ComboBox;
            var cb = c.PropertiesEdit as ComboBoxProperties;
            cb.ValueType = typeof(DateTime);
            cb.TextField = "DisplayShort";
            cb.ValueField = "Date";
            cb.DataSource = Model.FiscalYearPeriodsList;
        });


        s.Columns.AddBand(b => {
            b.Name = "bandAssignments";
            b.Caption = "Assignments";
            b.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;

            b.Columns.Add(
                c => {
                    c.FieldName = "CustomerID";
                    c.Caption = "Customer";
                    c.ColumnType = MVCxGridViewColumnType.ComboBox;
                    c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                    c.Settings.SortMode = DevExpress.XtraGrid.ColumnSortMode.DisplayText;
                    var cbProps = c.PropertiesEdit as ComboBoxProperties;
                    cbProps.DataSource = Model.CustomersList;
                    cbProps.TextField = "Name";
                    cbProps.ValueField = "ID";
                    cbProps.ValueType = typeof(int);

                }
            );

            b.Columns.Add(
                    c => {
                        c.FieldName = "PersonnelID";
                        c.Caption = "Sales Pro";
                        c.ColumnType = MVCxGridViewColumnType.ComboBox;
                        c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                        c.Settings.SortMode = DevExpress.XtraGrid.ColumnSortMode.DisplayText;
                        var cbProps = c.PropertiesEdit as ComboBoxProperties;
                        cbProps.DataSource = Model.PersonnelList;
                        cbProps.TextField = "DisplayName";
                        cbProps.ValueField = "ID";
                        cbProps.ValueType = typeof(int);
                    }
                );

            b.Columns.Add(
                c => {
                    c.FieldName = "ProductID";
                    c.Caption = "Product";
                    c.ColumnType = MVCxGridViewColumnType.ComboBox;
                    c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                    c.Visible = AppService.Current.Settings.ProductFeatureEnabled;
                    c.Settings.SortMode = DevExpress.XtraGrid.ColumnSortMode.DisplayText;
                    var cbProps = c.PropertiesEdit as ComboBoxProperties;
                    cbProps.DataSource = Model.ProductsList;
                    cbProps.TextFormatString = "{1}";
                    cbProps.ValueField = "ID";
                    cbProps.Columns.Add("GroupName");
                    cbProps.Columns.Add("SKU");
                    cbProps.Columns.Add("Description");
                    cbProps.ValueType = typeof(int);
                }
            );

        });





        s.Columns.AddBand(b => {
            b.Name = "bandSales";
            b.Caption = "Sales";
            b.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            b.Columns.Add(c => {
                c.FieldName = "SalesActual";
                c.Caption = "Actual";
                //c.PropertiesEdit.DisplayFormatString = "${0}";
                c.PropertiesEdit.DisplayFormatString = "C0";
                c.Settings.AllowAutoFilter = DefaultBoolean.False;
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            });
            b.Columns.Add(c => {
                c.FieldName = "SalesForecast";
                c.Caption = "Forecast";
                c.PropertiesEdit.DisplayFormatString = "C0";
                c.Settings.AllowAutoFilter = DefaultBoolean.False;
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            });

            b.Columns.Add(c =>
            {
                c.FieldName = "SalesTarget";
                c.Caption = "Target";
                c.Visible = AppService.Current.Settings.TargetFeatureEnabled;
                c.PropertiesEdit.DisplayFormatString = "C0";
                c.Settings.AllowAutoFilter = DefaultBoolean.False;
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            });
        });

        s.Columns.AddBand(b => {
            b.Name = "bandCosts";
            b.Caption = "GPP";
            b.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            b.Columns.Add(c => {
                c.FieldName = "GPPActual";
                c.Caption = "Actual";
                c.PropertiesEdit.DisplayFormatString = "{0:n2} %";
                c.Settings.AllowAutoFilter = DefaultBoolean.False;
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            });
            b.Columns.Add(c => {
                c.FieldName = "GPPForecast";
                c.Caption = "Forecast";
                c.PropertiesEdit.DisplayFormatString = "{0:n2} %";
                c.Settings.AllowAutoFilter = DefaultBoolean.False;
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            });
            b.Columns.Add(c =>
            {
                c.FieldName = "GPPTarget";
                c.Caption = "Target";
                c.Visible = AppService.Current.Settings.TargetFeatureEnabled;
                c.PropertiesEdit.DisplayFormatString = "{0:n2} %";
                c.Settings.AllowAutoFilter = DefaultBoolean.False;
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            });
        });

        s.Columns.AddBand(b => {
            b.Name = "bandCalls";
            b.Caption = "Calls";
            b.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            b.Columns.Add(c => {
                c.FieldName = "CallsActual";
                c.Caption = "Actual";
                c.Settings.AllowAutoFilter = DefaultBoolean.False;
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                c.Width = 75;
            });
            b.Columns.Add(c => {
                c.FieldName = "CallsForecast";
                c.Caption = "Forecast";
                c.Settings.AllowAutoFilter = DefaultBoolean.False;
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                c.Width = 75;
            });

            if (AppService.Current.Settings.TargetFeatureEnabled)
            {
                b.Columns.Add(c =>
                {
                    c.FieldName = "CallsTarget";
                    c.Caption = "Target";
                    c.Visible = AppService.Current.Settings.TargetFeatureEnabled;
                    c.Settings.AllowAutoFilter = DefaultBoolean.False;
                    c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
                    c.Width = 75;
                });
            }
        });

        s.Columns.AddBand(b => {
            b.Name = "bandOpportunity";
            b.Caption = "Opportunity";
            b.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;

            b.Columns.Add(c => {
                c.FieldName = "Potential";
                c.Caption = "Potential";
                c.PropertiesEdit.DisplayFormatString = "C0";
                c.Settings.AllowAutoFilter = DefaultBoolean.False;
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            });
            b.Columns.Add(c => {
                c.FieldName = "CurrentOpportunity";
                c.Caption = "Current<br />Opportunity";
                c.PropertiesEdit.DisplayFormatString = "C0";
                c.Settings.AllowAutoFilter = DefaultBoolean.False;
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            });
            b.Columns.Add(c => {
                c.FieldName = "FutureOpportunity";
                c.Caption = "Future<br />Opportunity";
                c.PropertiesEdit.DisplayFormatString = "C0";
                c.Settings.AllowAutoFilter = DefaultBoolean.False;
                c.HeaderStyle.HorizontalAlign = HorizontalAlign.Center;
            });

        });



    }
).Bind(Model.MatrixGridItems).GetHtml()